import pandas as pd
from datetime import datetime
from bot.services import auth
from bot.utils import send_formatted_message, send_error_message
from bot.keyboards import create_main_menu

# –°–ª–æ–≤–∞—Ä—å –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    "Monday": "–ü–Ω",
    "Tuesday": "–í—Ç",
    "Wednesday": "–°—Ä",
    "Thursday": "–ß—Ç",
    "Friday": "–ü—Ç",
    "Saturday": "–°–±",
    "Sunday": "–í—Å"
}

def get_shift_type(row, user_name, sheet_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ª–∏–Ω–∏–π"""
    if sheet_name == "–ì–°–ú–ê–∏–¶–ü":
        if row.get("–û—Å–Ω–æ–≤–∞") == user_name:
            return "üë®‚Äçüíª –û—Å–Ω–æ–≤–Ω–∞—è"
        elif row.get("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ") == user_name:
            return "üíª –ê–¥–º–∏–Ω"
        elif row.get("–ù–æ—á—å") == user_name:
            return "üåô –ù–æ—á—å"
        elif row.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å") == user_name:
            return "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
        elif row.get("–†–µ–∑–µ—Ä–≤") == user_name:
            return "üîÑ –†–µ–∑–µ—Ä–≤"
    
    elif sheet_name == "1 –õ–∏–Ω–∏—è":
        if pd.notna(row.get("–î–Ω–µ–≤–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ")) and user_name in str(row.get("–î–Ω–µ–≤–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ", "")):
            return "üåû –î–Ω–µ–≤–Ω–∞—è"
        elif row.get("–ù–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ") == user_name:
            return "üåô –ù–æ—á–Ω–∞—è"
        elif row.get("–†–µ–∑–µ—Ä–≤") == user_name:
            return "üîÑ –†–µ–∑–µ—Ä–≤"
        elif row.get("–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç") == user_name:
            return "üëë –°—Ç–∞—Ä—à–∏–π"
    
    elif sheet_name == "2 –ª–∏–Ω–∏—è":
        if row.get("–û—Ñ–∏—Å") == user_name:
            return "üè¢ –û—Ñ–∏—Å"
        elif row.get("–ê—É—Ç—Å–æ—Ä—Å") == user_name:
            return "üåê –ê—É—Ç—Å–æ—Ä—Å"
        elif pd.notna(row.get("–£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å")) and user_name in str(row.get("–£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "")):
            return "üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è"
        elif row.get("–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç") == user_name:
            return "üë®‚Äçüíª –°—Ç–∞—Ä—à–∏–π"
        elif row.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å") == user_name:
            return "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
    
    return None

def show_user_shifts(bot, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –ª–∏–Ω–∏–π"""
    try:
        user_name = auth.get_user_name(chat_id)
        if not user_name:
            send_error_message(bot, chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            return
        
<<<<<<< HEAD
        if pd.notna(row.get("–û—Å–Ω–æ–≤–∞")) and row["–û—Å–Ω–æ–≤–∞"] == user_name:
            lines.append(f"‚îÇ <b>üë®‚Äçüíª –û—Å–Ω–æ–≤–Ω–∞—è</b>:     {date_str} ({weekday_ru})")
        if pd.notna(row.get("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")) and row["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"] == user_name:
            lines.append(f"‚îÇ <b>üíª –ê–¥–º–∏–Ω</b>:        {date_str} ({weekday_ru})")
        if pd.notna(row.get("–ù–æ—á—å")) and row["–ù–æ—á—å"] == user_name:
            lines.append(f"‚îÇ <b>üåô –ù–æ—á—å</b>:         {date_str} ({weekday_ru})")
    
    send_formatted_message(bot, chat_id, "üìÖ –í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã:", lines)
=======
        from config import Config
        today = datetime.now().date()
        all_shifts = []
>>>>>>> features/1line

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º 1 –ª–∏–Ω–∏—é
        try:
            df_first = pd.read_excel(Config.SCHEDULE_FILE, sheet_name="1 –õ–∏–Ω–∏—è")
            df_first["–î–∞—Ç–∞"] = pd.to_datetime(df_first["–î–∞—Ç–∞"]).dt.date
            df_first = df_first[df_first["–î–∞—Ç–∞"] >= today]
            
            for _, row in df_first.iterrows():
                shift_type = get_shift_type(row, user_name, "1 –õ–∏–Ω–∏—è")
                if shift_type:
                    weekday = WEEKDAYS.get(row["–î–∞—Ç–∞"].strftime("%A"), "?")
                    all_shifts.append({
                        "date": row["–î–∞—Ç–∞"],
                        "type": shift_type,
                        "line": "1–õ",
                        "display": f"{shift_type} - {row['–î–∞—Ç–∞'].strftime('%d.%m')} ({weekday})"
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 1 –ª–∏–Ω–∏–∏: {e}")

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–º–µ–Ω—ã –≤ 1 –ª–∏–Ω–∏–∏, –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ª–∏–Ω–∏–∏
        if all_shifts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_shifts.sort(key=lambda x: x["date"])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            lines = []
            for shift in all_shifts:
                lines.append(f"‚îÇ {shift['display']}")
            
            send_formatted_message(bot, chat_id, f"üìÖ –ë—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã ({user_name}):", lines)
            return

<<<<<<< HEAD
    lines = []
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    shift_checks = [
        ('–û—Å–Ω–æ–≤–∞', 'üë®‚Äçüíª –û—Å–Ω–æ–≤–Ω–∞—è'),
        ('–ù–æ—á—å', 'üåô –ù–æ—á—å'),
        ('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', 'üíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', 'üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'),
        ('–†–µ–∑–µ—Ä–≤', 'üîÑ –†–µ–∑–µ—Ä–≤'),
        ('–û—Ç–ø—É—Å–∫', 'üèñ –û—Ç–ø—É—Å–∫')
    ]
    
    for col, emoji in shift_checks:
        if pd.notna(next_shift.get(col)) and next_shift[col] == user_name:
            lines.append(f"‚îÇ {emoji}: {user_name}")
=======
        # –ï—Å–ª–∏ –≤ 1 –ª–∏–Ω–∏–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º 2 –ª–∏–Ω–∏—é
        try:
            df_second = pd.read_excel(Config.SCHEDULE_FILE, sheet_name="2 –ª–∏–Ω–∏—è")
            df_second["–î–∞—Ç–∞"] = pd.to_datetime(df_second["–î–∞—Ç–∞"]).dt.date
            df_second = df_second[df_second["–î–∞—Ç–∞"] >= today]
            
            for _, row in df_second.iterrows():
                shift_type = get_shift_type(row, user_name, "2 –ª–∏–Ω–∏—è")
                if shift_type:
                    weekday = WEEKDAYS.get(row["–î–∞—Ç–∞"].strftime("%A"), "?")
                    all_shifts.append({
                        "date": row["–î–∞—Ç–∞"],
                        "type": shift_type,
                        "line": "2–õ",
                        "display": f"{shift_type} - {row['–î–∞—Ç–∞'].strftime('%d.%m')} ({weekday})"
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 2 –ª–∏–Ω–∏–∏: {e}")
>>>>>>> features/1line

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–º–µ–Ω—ã –≤–æ 2 –ª–∏–Ω–∏–∏, –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –ì–°–ú–ê–∏–¶–ü
        if all_shifts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_shifts.sort(key=lambda x: x["date"])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            lines = []
            for shift in all_shifts:
                lines.append(f"‚îÇ {shift['display']}")
            
            send_formatted_message(bot, chat_id, f"üìÖ –ë—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã ({user_name}):", lines)
            return

<<<<<<< HEAD
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ
    additional_checks = [
        ('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', 'üíª –ê–¥–º–∏–Ω'),
        ('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', 'üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'),
        ('–†–µ–∑–µ—Ä–≤', 'üîÑ –†–µ–∑–µ—Ä–≤'),
        ('–û—Ç–ø—É—Å–∫', 'üèñ –û—Ç–ø—É—Å–∫')
    ]
    
    for col, emoji in additional_checks:
        if pd.notna(next_shift.get(col)) and next_shift[col] != user_name:
            lines.append(f"‚îÇ {emoji}: {next_shift[col]}")

    send_formatted_message(
        bot,
        chat_id,
        f"‚¨áÔ∏è –í–∞—à–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞:",
        [f"‚îÇ üìÖ {date_str} ({weekday_ru})"] + lines
    )

@log_action("Statistics requested")
@with_schedule
def show_statistics(bot, df, chat_id):
    user_name = auth.get_user_name(chat_id)
    past_shifts = df[df["–î–∞—Ç–∞"] < datetime.now().date()]

    stats = {
        "–û—Å–Ω–æ–≤–Ω–∞—è": {"hours": 0, "count": 0},
        "–ù–æ—á—å": {"hours": 0, "count": 0},
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ": {"hours": 0, "count": 0},
        "–†–µ–∑–µ—Ä–≤": {"hours": 0, "count": 0},
    }

    for _, row in past_shifts.iterrows():
        if pd.notna(row.get("–û—Å–Ω–æ–≤–∞")) and row["–û—Å–Ω–æ–≤–∞"] == user_name:
            stats["–û—Å–Ω–æ–≤–Ω–∞—è"]["hours"] += 12
            stats["–û—Å–Ω–æ–≤–Ω–∞—è"]["count"] += 1
        if pd.notna(row.get("–ù–æ—á—å")) and row["–ù–æ—á—å"] == user_name:
            stats["–ù–æ—á—å"]["hours"] += 12
            stats["–ù–æ—á—å"]["count"] += 1
        if pd.notna(row.get("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")) and row["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"] == user_name:
            stats["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"]["hours"] += 9
            stats["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"]["count"] += 1
        if pd.notna(row.get("–†–µ–∑–µ—Ä–≤")) and row["–†–µ–∑–µ—Ä–≤"] == user_name:
            stats["–†–µ–∑–µ—Ä–≤"]["hours"] += 9
            stats["–†–µ–∑–µ—Ä–≤"]["count"] += 1

    total_hours = sum(v["hours"] for v in stats.values())

    if total_hours == 0:
        return send_formatted_message(bot, chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å–º–µ–Ω–∞–º", [])

    lines = [
        f"‚îÇ <b>üïí –í—Å–µ–≥–æ —á–∞—Å–æ–≤</b>:     <b>{total_hours}</b>",
        "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        f"‚îÇ <b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–º–µ–Ω—ã</b>:  {stats['–û—Å–Ω–æ–≤–Ω–∞—è']['hours']} —á ({stats['–û—Å–Ω–æ–≤–Ω–∞—è']['count']} —Å–º–µ–Ω)",
        f"‚îÇ <b>üåô –ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã</b>:    {stats['–ù–æ—á—å']['hours']} —á ({stats['–ù–æ—á—å']['count']} —Å–º–µ–Ω)",
        f"‚îÇ <b>üñ• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>: {stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']['hours']} —á ({stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']['count']} —Å–º–µ–Ω)",
        f"‚îÇ <b>üîÑ –†–µ–∑–µ—Ä–≤</b>:          {stats['–†–µ–∑–µ—Ä–≤']['hours']} —á ({stats['–†–µ–∑–µ—Ä–≤']['count']} —Å–º–µ–Ω)"
    ]

    send_formatted_message(bot, chat_id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_name}", lines)
=======
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ 1 –∏ 2 –ª–∏–Ω–∏—è—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ì–°–ú–ê–∏–¶–ü
        try:
            df_gsma = pd.read_excel(Config.SCHEDULE_FILE, sheet_name="–ì–°–ú–ê–∏–¶–ü")
            df_gsma["–î–∞—Ç–∞"] = pd.to_datetime(df_gsma["–î–∞—Ç–∞"]).dt.date
            df_gsma = df_gsma[df_gsma["–î–∞—Ç–∞"] >= today]
            
            for _, row in df_gsma.iterrows():
                shift_type = get_shift_type(row, user_name, "–ì–°–ú–ê–∏–¶–ü")
                if shift_type:
                    weekday = WEEKDAYS.get(row["–î–∞—Ç–∞"].strftime("%A"), "?")
                    all_shifts.append({
                        "date": row["–î–∞—Ç–∞"],
                        "type": shift_type,
                        "line": "–ì–°–ú–ê",
                        "display": f"{shift_type} - {row['–î–∞—Ç–∞'].strftime('%d.%m')} ({weekday})"
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ì–°–ú–ê–∏–¶–ü: {e}")

        if not all_shifts:
            send_formatted_message(bot, chat_id, "üéâ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω!", [])
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        all_shifts.sort(key=lambda x: x["date"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = []
        for shift in all_shifts:
            lines.append(f"‚îÇ {shift['display']}")
        
        send_formatted_message(bot, chat_id, f"üìÖ –ë—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã ({user_name}):", lines)
        
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        send_error_message(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω")
>>>>>>> features/1line
