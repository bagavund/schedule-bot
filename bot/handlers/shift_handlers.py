import pandas as pd
from datetime import datetime
from bot.services import auth
from bot.utils import send_formatted_message, send_error_message
from bot.keyboards import create_main_menu

WEEKDAYS = {
    "Monday": "–ü–Ω",
    "Tuesday": "–í—Ç",
    "Wednesday": "–°—Ä",
    "Thursday": "–ß—Ç",
    "Friday": "–ü—Ç",
    "Saturday": "–°–±",
    "Sunday": "–í—Å"
}

def get_shift_type(row, user_name, sheet_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ª–∏–Ω–∏–π –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    
    def check_multiple_users(cell_value, user_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —è—á–µ–π–∫–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        if pd.isna(cell_value):
            return False
     
        separators = [',', ';', ' –∏ ', '/', '\\']
        values = str(cell_value)

        for sep in separators:
            if sep in values:
                users = [u.strip() for u in values.split(sep) if u.strip()]
                if user_name in users:
                    return True

        return values.strip() == user_name
    
    if sheet_name == "–ì–°–ú–ê–∏–¶–ü":
        if check_multiple_users(row.get("–û—Å–Ω–æ–≤–∞"), user_name):
            return "üë®‚Äçüíª –û—Å–Ω–æ–≤–Ω–∞—è"
        elif check_multiple_users(row.get("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"), user_name):
            return "üíª –ê–¥–º–∏–Ω"
        elif check_multiple_users(row.get("–ù–æ—á—å"), user_name):
            return "üåô –ù–æ—á—å"
        elif check_multiple_users(row.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"), user_name):
            return "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
        elif check_multiple_users(row.get("–†–µ–∑–µ—Ä–≤"), user_name):
            return "üîÑ –†–µ–∑–µ—Ä–≤"
        elif check_multiple_users(row.get("–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"), user_name):
            return "‚≠ê –í–µ–¥—É—â–∏–π"
    
    elif sheet_name == "1 –õ–∏–Ω–∏—è":
        if check_multiple_users(row.get("–î–Ω–µ–≤–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ"), user_name):
            return "üåû –î–Ω–µ–≤–Ω–∞—è"
        elif check_multiple_users(row.get("–ù–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ"), user_name):
            return "üåô –ù–æ—á–Ω–∞—è"
        elif check_multiple_users(row.get("–†–µ–∑–µ—Ä–≤"), user_name):
            return "üîÑ –†–µ–∑–µ—Ä–≤"
        elif check_multiple_users(row.get("–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"), user_name):
            return "üëë –°—Ç–∞—Ä—à–∏–π"
    
    elif sheet_name == "2 –ª–∏–Ω–∏—è":
        if check_multiple_users(row.get("–û—Ñ–∏—Å"), user_name):
            return "üè¢ –û—Ñ–∏—Å"
        elif check_multiple_users(row.get("–ê—É—Ç—Å–æ—Ä—Å"), user_name):
            return "üåê –ê—É—Ç—Å–æ—Ä—Å"
        elif check_multiple_users(row.get("–£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"), user_name):
            return "üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è"
        elif check_multiple_users(row.get("–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"), user_name):
            return "üë®‚Äçüíª –°—Ç–∞—Ä—à–∏–π"
        elif check_multiple_users(row.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"), user_name):
            return "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
    
    return None

def show_user_shifts(bot, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –ª–∏–Ω–∏–π"""
    try:
        user_name = auth.get_user_name(chat_id)
        if not user_name:
            send_error_message(bot, chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            return
        
        from config import Config
        today = datetime.now().date()
        all_shifts = []

        sheets_to_check = ["1 –õ–∏–Ω–∏—è", "2 –ª–∏–Ω–∏—è", "–ì–°–ú–ê–∏–¶–ü"]
        
        for sheet_name in sheets_to_check:
            try:
                df = pd.read_excel(Config.SCHEDULE_FILE, sheet_name=sheet_name)
                if "–î–∞—Ç–∞" not in df.columns:
                    continue
                    
                df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True).dt.date
                df = df[df["–î–∞—Ç–∞"] >= today]
                
                for _, row in df.iterrows():
                    shift_type = get_shift_type(row, user_name, sheet_name)
                    if shift_type:
                        weekday = WEEKDAYS.get(row["–î–∞—Ç–∞"].strftime("%A"), "?")
                        all_shifts.append({
                            "date": row["–î–∞—Ç–∞"],
                            "type": shift_type,
                            "line": sheet_name,
                            "display": f"{shift_type} - {row['–î–∞—Ç–∞'].strftime('%d.%m')} ({weekday})"
                        })
                
                if all_shifts:
                    break
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {sheet_name}: {e}")
                continue

        if not all_shifts:
            send_formatted_message(bot, chat_id, "üéâ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω!", [])
            return
        
        all_shifts.sort(key=lambda x: x["date"])
        
        lines = []
        for shift in all_shifts:
            lines.append(f"‚îÇ {shift['display']}")
        
        send_formatted_message(bot, chat_id, f"üìÖ –ë—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã ({user_name}):", lines)
        
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        send_error_message(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω")
