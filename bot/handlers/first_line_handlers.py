import pandas as pd
from datetime import datetime, timedelta  # –î–æ–±–∞–≤–∏—Ç—å timedelta
import logging
from bot.services import storage
from bot.utils import log_action, send_formatted_message, send_error_message
from bot.keyboards import create_main_menu
from bot.utils.schedule_utils import parse_date

logger = logging.getLogger(__name__)

@log_action("First line schedule viewed")
def show_first_line_schedule(bot, chat_id, date):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1 –ª–∏–Ω–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        df = load_first_line_schedule()
        if df is None or df.empty:
            return send_error_message(
                bot,
                chat_id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ 1 –ª–∏–Ω–∏–∏",
                reply_markup=create_main_menu()
            )
        
        schedule_data = get_date_first_line_schedule(df, date)
        if schedule_data is not None:
            send_formatted_message(
                bot,
                chat_id,
                f"üìà 1 –ª–∏–Ω–∏—è –Ω–∞ {date.strftime('%d.%m.%Y')}",
                format_first_line_schedule(schedule_data),
                reply_markup=create_main_menu()
            )
        else:
            send_error_message(
                bot,
                chat_id,
                f"–ù–∞ {date.strftime('%d.%m.%Y')} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1 –ª–∏–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_main_menu()
            )
        
    except Exception as e:
        logger.error(f"Error showing first line schedule: {e}")
        send_error_message(
            bot,
            chat_id,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ 1 –ª–∏–Ω–∏–∏",
            reply_markup=create_main_menu()
        )

def handle_first_line_today(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–µ–≥–æ–¥–Ω—è 1–õ'"""
    show_first_line_schedule(bot, message.chat.id, datetime.now().date())

def handle_first_line_tomorrow(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤—Ç—Ä–∞ 1–õ'"""
    show_first_line_schedule(bot, message.chat.id, datetime.now().date() + timedelta(days=1))

def request_first_line_date(bot, chat_id):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ 1 –ª–∏–Ω–∏–∏"""
    msg = bot.send_message(
        chat_id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08):",
        parse_mode="HTML",
    )
    bot.register_next_step_handler(msg, lambda m: process_first_line_date_input(bot, m))

def process_first_line_date_input(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ 1 –ª–∏–Ω–∏–∏"""
    chat_id = message.chat.id
    date_obj = parse_date(message.text)
    
    if date_obj:
        show_first_line_schedule(bot, chat_id, date_obj)
    else:
        send_error_message(
            bot,
            chat_id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08).",
            reply_markup=create_main_menu()
        )

def load_first_line_schedule():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ 1 –ª–∏–Ω–∏–∏ –∏–∑ Excel"""
    try:
        from config import Config
        df = pd.read_excel(Config.SCHEDULE_FILE, sheet_name="1 –õ–∏–Ω–∏—è")
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"]).dt.date
        return df
    except Exception as e:
        logger.error(f"Error loading first line schedule: {e}")
        return None

def get_date_first_line_schedule(df, date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1 –ª–∏–Ω–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    schedule = df[df["–î–∞—Ç–∞"] == date]
    return schedule.iloc[0] if not schedule.empty else None

def format_first_line_schedule(row):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–∞—Ö 1 –ª–∏–Ω–∏–∏"""
    lines = [
        f"‚îÇ <b>üåû –î–Ω–µ–≤–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ</b>: {row['–î–Ω–µ–≤–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ'] if pd.notna(row['–î–Ω–µ–≤–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ']) else '‚Äî'}",
        f"‚îÇ <b>üîÑ –†–µ–∑–µ—Ä–≤</b>: {row['–†–µ–∑–µ—Ä–≤'] if pd.notna(row['–†–µ–∑–µ—Ä–≤']) else '‚Äî'}",
        f"‚îÇ <b>üåô –ù–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ</b>: {row['–ù–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ'] if pd.notna(row['–ù–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ']) else '‚Äî'}",
        f"‚îÇ <b>üëë –°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>: {row['–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'] if pd.notna(row['–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']) else '‚Äî'}"
    ]
    return lines