from datetime import datetime, timedelta
from bot.services import auth, schedule
from bot.keyboards import create_main_menu
from bot.utils.schedule_utils import with_schedule
from bot.utils import (
    log_action,
    send_formatted_message,
    send_error_message,
    parse_date
)

@log_action("Schedule viewed")
@with_schedule
def show_schedule(bot, chat_id, date, df=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ì–°–ú–ê–∏–¶–ü –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if df is None:
        send_error_message(
            bot,
            chat_id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            reply_markup=create_main_menu()
        )
        return
        
    schedule_data = schedule.get_date_schedule(df, date)
    if schedule_data is not None:
        send_formatted_message(
            bot,
            chat_id,
            f"üìä –ì–°–ú–ê–∏–¶–ü –Ω–∞ {date.strftime('%d.%m.%Y')}",
            schedule.format_schedule(schedule_data).split('\n')[2:-1],
            reply_markup=create_main_menu()
        )
    else:
        if df.empty:
            send_error_message(
                bot,
                chat_id,
                "–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω",
                reply_markup=create_main_menu()
            )
        else:
            min_date = df["–î–∞—Ç–∞"].min()
            max_date = df["–î–∞—Ç–∞"].max()
            send_error_message(
                bot,
                chat_id,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_date.strftime('%d.%m.%Y')} - {max_date.strftime('%d.%m.%Y')}",
                reply_markup=create_main_menu()
            )

def handle_gsma_today(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–µ–≥–æ–¥–Ω—è –ì–°–ú–ê'"""
    show_schedule(bot, message.chat.id, datetime.now().date())

def handle_gsma_tomorrow(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤—Ç—Ä–∞ –ì–°–ú–ê'"""
    show_schedule(bot, message.chat.id, datetime.now().date() + timedelta(days=1))

def request_gsma_date(bot, chat_id):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ì–°–ú–ê–∏–¶–ü"""
    msg = bot.send_message(
        chat_id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07):",
        parse_mode="HTML",
    )
    bot.register_next_step_handler(msg, lambda m: process_gsma_date_input(bot, m))

def process_gsma_date_input(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ì–°–ú–ê–∏–¶–ü"""
    chat_id = message.chat.id
    date_obj = parse_date(message.text)
    
    if date_obj:
        show_schedule(bot, chat_id, date_obj)
    else:
        send_error_message(
            bot,
            chat_id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07).",
            reply_markup=create_main_menu()
        )