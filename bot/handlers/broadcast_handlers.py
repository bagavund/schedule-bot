import logging
import time
from bot.services.auth import user_states
from bot.utils import log_action, send_error_message

logger = logging.getLogger(__name__)

@log_action("Broadcast requested")
def handle_broadcast(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    
    from bot.services.auth import is_admin_user
    if not is_admin_user(chat_id):
        send_error_message(bot, chat_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    broadcast_text = message.text.replace('/broadcast', '').strip()
    
    if not broadcast_text:
        send_error_message(bot, chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–ü—Ä–∏–º–µ—Ä: /broadcast –ó–∞–≤—Ç—Ä–∞ —Å–æ–±—Ä–∞–Ω–∏–µ –≤ 10:00")
        return
    
    recipients = []
    
    for user_chat_id, user_info in user_states.items():
        if user_info.get('authorized'):
            recipients.append({
                'chat_id': user_chat_id,
                'name': user_info.get('name', 'Unknown')
            })
    
    if not recipients:
        send_error_message(bot, chat_id, "‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    process_broadcast(bot, chat_id, broadcast_text, recipients)

def process_broadcast(bot, admin_chat_id, broadcast_text, recipients):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    success_count = 0
    fail_count = 0
    
    status_message = bot.send_message(
        admin_chat_id,
        f"‚è≥ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}",
        parse_mode="HTML"
    )
    
    for i, recipient in enumerate(recipients, 1):
        if send_to_user(bot, recipient['chat_id'], broadcast_text, recipient['name']):
            success_count += 1
        else:
            fail_count += 1

        if i % 10 == 0:
            try:
                bot.edit_message_text(
                    f"‚è≥ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i}/{len(recipients)}",
                    admin_chat_id,
                    status_message.message_id,
                    parse_mode="HTML"
                )
            except:
                pass
        time.sleep(0.1)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    bot.edit_message_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
        f"–í—Å–µ–≥–æ: {len(recipients)}",
        admin_chat_id,
        status_message.message_id,
        parse_mode="HTML"
    )

def send_to_user(bot, user_chat_id, message_text, user_name=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        text = f"üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n{message_text}"
        bot.send_message(user_chat_id, text, parse_mode="HTML")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}: {e}")
        return False