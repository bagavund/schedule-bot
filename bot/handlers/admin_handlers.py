from telebot import types
import logging
from bot.services import auth
from bot.keyboards import create_admin_keyboard, create_main_menu
from bot.utils.broadcast import BroadcastManager
from bot.utils.decorators import log_action

logger = logging.getLogger(__name__)

@log_action("Admin panel accessed")
def handle_admin_panel(bot, message):
    if not auth.is_admin(message.chat.id):
        logger.warning(f"Unauthorized admin access by {message.chat.id}")
        bot.send_message(
            message.chat.id,
            "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
            reply_markup=create_main_menu()
        )
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"))
    markup.row(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    markup.row(types.KeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"))
    
    bot.send_message(
        message.chat.id,
        "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=markup
    )

@log_action("Broadcast initiated")
def handle_broadcast_start(bot, message):
    msg = bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n(–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, lambda m: process_broadcast_message(bot, m))

def process_broadcast_message(bot, message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return handle_admin_panel(bot, message)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{message.id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    
    bot.send_message(
        message.chat.id,
        f"‚úâÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n{message.text}",
        reply_markup=markup
    )

def setup_admin_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
    def confirm_broadcast(call):
        try:
            message_text = call.message.text.split("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:")[-1].strip()
            
            bot.edit_message_text(
                "üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...",
                call.message.chat.id,
                call.message.id
            )
            
            broadcaster = BroadcastManager(bot)
            stats = broadcaster.broadcast_with_progress(message_text)
            
            bot.edit_message_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ: {stats['success']}\n–û—à–∏–±–∫–∏: {stats['failed']}",
                call.message.chat.id,
                call.message.id
            )
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            handle_admin_panel(bot, call.message)
            
        except Exception as e:
            logger.error(f"Broadcast error: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
            handle_admin_panel(bot, call.message)

    @bot.callback_query_handler(func=lambda call: call.data == 'cancel')
    def cancel_broadcast(call):
        try:
            bot.delete_message(call.message.chat.id, call.message.id)
            handle_admin_panel(bot, call.message)
        except Exception as e:
            logger.error(f"Cancel error: {e}")
            bot.send_message(
                call.message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ",
                reply_markup=create_admin_keyboard()
            )

__all__ = [
    'handle_admin_panel',
    'handle_broadcast_start',
    'setup_admin_handlers'
]