from telebot import types
import logging
from bot.services import auth
from bot.keyboards import create_admin_keyboard, create_main_menu
from bot.utils.broadcast import BroadcastManager
from bot.utils.decorators import log_action

logger = logging.getLogger(__name__)

@log_action("Admin panel accessed")
def handle_admin_panel(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not auth.is_admin(message.chat.id):
        logger.warning(f"Unauthorized admin access attempt by {message.chat.id}")
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    bot.send_message(
        message.chat.id,
        "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=create_admin_keyboard()
    )

@log_action("Broadcast initiated")
def handle_broadcast_start(bot, message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    msg = bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞):\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, lambda m: process_broadcast_message(bot, m))

def process_broadcast_message(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return handle_admin_panel(bot, message)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{message.id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    
    preview = bot.send_message(
        message.chat.id,
        f"‚úâÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n{message.text}",
        reply_markup=markup,
        parse_mode="HTML"
    )

def setup_admin_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
    def confirm_broadcast(call):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –∏–∑ reply_to_message
            message_text = call.message.text.split("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:")[-1].strip()
            
            bot.edit_message_text(
                "üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...",
                call.message.chat.id,
                call.message.id
            )
            
            broadcaster = BroadcastManager(bot)
            stats = broadcaster.broadcast_with_progress(message_text)
            
            bot.edit_message_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ: {stats['success']}\n–û—à–∏–±–∫–∏: {stats['failed']}",
                call.message.chat.id,
                call.message.id
            )
        except Exception as e:
            logger.error(f"Broadcast error: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
    
    @bot.callback_query_handler(func=lambda call: call.data == 'cancel')
    def cancel_broadcast(call):
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

__all__ = [
    'handle_admin_panel',
    'handle_broadcast_start',
    'setup_admin_handlers'
]