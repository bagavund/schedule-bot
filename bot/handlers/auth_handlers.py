from bot.services.auth import (  # ‚Üê –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    is_admin_user, 
    authorize_user_by_username, 
    authorize_user_legacy
)
from bot.keyboards import create_main_menu
from bot.utils import log_action, send_error_message

@log_action("Auth requested")
def request_auth(bot, chat_id):
    """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–≥–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        user = bot.get_chat(chat_id)
        username = f"@{user.username}" if user.username else None
        
        if username:
            message_text = (
                f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:"
            )
        else:
            message_text = (
                f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n"
                f"‚ö†Ô∏è –£ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username (@–ª–æ–≥–∏–Ω)\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:"
            )
            
    except Exception as e:
        message_text = "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:"
    
    msg = bot.send_message(chat_id, message_text)
    bot.register_next_step_handler(msg, lambda m: process_auth_step(bot, m))

@log_action("Auth processed")
def process_auth_step(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    user_input = message.text.strip()

    success, response = authorize_user_by_username(message, user_input)  # ‚Üê –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    
    if success:
        bot.send_message(chat_id, response, reply_markup=create_main_menu())
    else:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –§–ò–û - –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        if "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in response or "–û–∂–∏–¥–∞–µ—Ç—Å—è:" in response:
            msg = bot.send_message(chat_id, response)
            bot.register_next_step_handler(msg, lambda m: process_auth_step(bot, m))
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            bot.send_message(chat_id, response)
            request_auth(bot, chat_id)

@log_action("User switch requested")
def request_switch_user(bot, chat_id):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not is_admin_user(chat_id):  # ‚Üê –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
        send_error_message(bot, chat_id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    from bot.services.auth import get_user_name  # ‚Üê –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    current_user = get_user_name(chat_id)
    
    msg = bot.send_message(
        chat_id,
        f"üîí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=create_main_menu()
    )
    bot.register_next_step_handler(msg, lambda m: process_switch_user(bot, m))

@log_action("User switch processed")
def process_switch_user(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    user_input = message.text.strip()

    if not is_admin_user(chat_id):  # ‚Üê –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
        send_error_message(bot, chat_id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ "–Ω–∞–∑–∞–¥" - –æ—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    if user_input.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥', 'cancel']:
        bot.send_message(
            chat_id,
            "‚ùå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=create_main_menu()
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏–∏
    success, response = authorize_user_legacy(chat_id, user_input)  # ‚Üê –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    
    if success:
        bot.send_message(chat_id, response, reply_markup=create_main_menu())
    else:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
        msg = bot.send_message(
            chat_id,
            f"{response}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        bot.register_next_step_handler(msg, lambda m: process_switch_user(bot, m))