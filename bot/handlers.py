import pandas as pd
from datetime import datetime, timedelta
from telebot import types
from bot.services import auth, schedule, storage
from bot.keyboards import create_main_menu, create_test_menu

def handle_message(bot, message):
    chat_id = message.chat.id
    text = message.text.lower()

    if text == '—Å–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        auth.deauthorize_user(chat_id)
        request_auth(bot, chat_id)
        return

    if not auth.is_authorized(chat_id):
        request_auth(bot, chat_id)
        return

    text = message.text.lower()

    if text == '–º–æ–∏ —Å–º–µ–Ω—ã':
        show_user_shifts(bot, chat_id)
    elif text == '—Å–µ–≥–æ–¥–Ω—è':
        show_schedule(bot, chat_id, datetime.now().date())
    elif text == '–∑–∞–≤—Ç—Ä–∞':
        show_schedule(bot, chat_id, datetime.now().date() + timedelta(days=1))
    elif text == '–≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É':
        request_date(bot, chat_id)
    elif text == '—Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏':
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_test_menu())
    elif text == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_statistics(bot, chat_id)
    elif text == '–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        show_main_menu(bot, chat_id)
    else:
        try:
            date_str = f"{text}.{datetime.now().year}"
            date_obj = datetime.strptime(date_str, '%d.%m.%Y').date()
            show_schedule(bot, chat_id, date_obj)
        except ValueError:
            show_main_menu(bot, chat_id)

def show_statistics(bot, chat_id):
    user_name = auth.get_user_name(chat_id)
    df = storage.load_schedule()

    if df is None:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    past_shifts = df[df['–î–∞—Ç–∞'] < datetime.now().date()]

    stats = {
        '–û—Å–Ω–æ–≤–Ω–∞—è': {'hours': 0, 'count': 0},
        '–ù–æ—á—å': {'hours': 0, 'count': 0},
        '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ': {'hours': 0, 'count': 0},
        '–†–µ–∑–µ—Ä–≤': {'hours': 0, 'count': 0}
    }

    for _, row in past_shifts.iterrows():
        if row['–û—Å–Ω–æ–≤–∞'] == user_name:
            stats['–û—Å–Ω–æ–≤–Ω–∞—è']['hours'] += 12
            stats['–û—Å–Ω–æ–≤–Ω–∞—è']['count'] += 1
        if row['–ù–æ—á—å'] == user_name:
            stats['–ù–æ—á—å']['hours'] += 12
            stats['–ù–æ—á—å']['count'] += 1
        if pd.notna(row['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']) and row['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'] == user_name:
            stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']['hours'] += 9
            stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']['count'] += 1
        if pd.notna(row['–†–µ–∑–µ—Ä–≤']) and row['–†–µ–∑–µ—Ä–≤'] == user_name:
            stats['–†–µ–∑–µ—Ä–≤']['hours'] += 9
            stats['–†–µ–∑–µ—Ä–≤']['count'] += 1

    total_hours = sum(v['hours'] for v in stats.values())

    if total_hours == 0:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å–º–µ–Ω–∞–º", reply_markup=create_test_menu())
        return

    response = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_name}</b>\n\n"
        f"üïí –í—Å–µ–≥–æ —á–∞—Å–æ–≤: <b>{total_hours}</b>\n\n"
        f"üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–º–µ–Ω—ã: {stats['–û—Å–Ω–æ–≤–Ω–∞—è']['hours']} —á ({stats['–û—Å–Ω–æ–≤–Ω–∞—è']['count']} —Å–º–µ–Ω)\n"
        f"üåô –ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã: {stats['–ù–æ—á—å']['hours']} —á ({stats['–ù–æ—á—å']['count']} —Å–º–µ–Ω)\n"
        f"üñ• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: {stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']['hours']} —á ({stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']['count']} —Å–º–µ–Ω)\n"
        f"üîÑ –†–µ–∑–µ—Ä–≤: {stats['–†–µ–∑–µ—Ä–≤']['hours']} —á ({stats['–†–µ–∑–µ—Ä–≤']['count']} —Å–º–µ–Ω)"
    )

    bot.send_message(chat_id, response, parse_mode='HTML', reply_markup=create_test_menu())

def request_auth(bot, chat_id):
    msg = bot.send_message(chat_id, "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n"
                                  "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:")
    bot.register_next_step_handler(msg, lambda m: process_auth_step(bot, m))

def process_auth_step(bot, message):
    chat_id = message.chat.id
    user_input = message.text.strip()

    success, response = auth.authorize_user(chat_id, user_input)
    bot.send_message(chat_id, response,
                    reply_markup=create_main_menu() if success else None)

    if not success:
        request_auth(bot, chat_id)

def show_user_shifts(bot, chat_id):
    user_name = auth.get_user_name(chat_id)
    df = storage.load_schedule()

    if df is None:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    shifts = schedule.get_user_shifts(df, user_name)

    if shifts.empty:
        bot.send_message(chat_id, "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω")
        return

    response = "üìÖ <b>–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã:</b>\n\n"

    for _, row in shifts.iterrows():
        date_str = row['–î–∞—Ç–∞'].strftime('%d.%m.%Y')
        weekday_en = row['–î–∞—Ç–∞'].strftime('%A')
        weekday_ru = schedule.WEEKDAYS.get(weekday_en, weekday_en)

        shift_types = []
        if row['–û—Å–Ω–æ–≤–∞'] == user_name:
            shift_types.append("–û—Å–Ω–æ–≤–Ω–∞—è")
        if pd.notna(row['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']) and row['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'] == user_name:
            shift_types.append("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if row['–ù–æ—á—å'] == user_name:
            shift_types.append("–ù–æ—á–Ω–∞—è")

        response += f"‚ñ™Ô∏è {date_str} ({weekday_ru}): {', '.join(shift_types)}\n"

    bot.send_message(chat_id, response, parse_mode='HTML')

def show_schedule(bot, chat_id, date):
    df = storage.load_schedule()
    if df is None:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    schedule_data = schedule.get_date_schedule(df, date)
    if schedule_data is not None:
        bot.send_message(chat_id, schedule.format_schedule(schedule_data),
                       reply_markup=create_main_menu(),
                       parse_mode='HTML')
    else:
        bot.send_message(chat_id, f"üìÖ –ù–∞ {date.strftime('%d.%m.%Y')} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                       reply_markup=create_main_menu())

def request_date(bot, chat_id):
    current_year = datetime.now().year
    msg = bot.send_message(chat_id,
                         f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07):",
                         parse_mode='HTML')
    bot.register_next_step_handler(msg, lambda m: process_date_input(bot, m))

def process_date_input(bot, message):
    chat_id = message.chat.id
    try:
        date_str = f"{message.text}.{datetime.now().year}"
        date_obj = datetime.strptime(date_str, '%d.%m.%Y').date()
        show_schedule(bot, chat_id, date_obj)
    except ValueError:
        bot.send_message(chat_id,
                       "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07).\n\n"
                       "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                       reply_markup=create_main_menu(),
                       parse_mode='HTML')

def show_main_menu(bot, chat_id):
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                   reply_markup=create_main_menu())

def change_user(bot, chat_id):
    auth.deauthorize_user(chat_id)
    bot.send_message(chat_id, "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    request_auth(bot, chat_id)
